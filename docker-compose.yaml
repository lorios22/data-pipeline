services: 
  postgres:
    image: postgres:16  # Use PostgreSQL version 16
    environment:
      POSTGRES_USER: airflow  # Set the username for the PostgreSQL database
      POSTGRES_PASSWORD: airflow  # Set the password for the PostgreSQL database
      POSTGRES_DB: airflow  # Database name
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data  # Persist data in a Docker volume
    ports:
      - "5432:5432"  # Expose port 5432 for connections from outside Docker (like DBeaver)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]  # Check if the PostgreSQL server is ready
      interval: 10s  # Interval between health checks
      retries: 5  # Number of retries before marking the service as unhealthy
      timeout: 5s  # Timeout for the health check command
    networks:
      - airflow  # Connect to the 'airflow' network

  airflow-init:
    build:
      context: .  # Build context is the current directory
      dockerfile: Dockerfile  # Specify the Dockerfile to use for building
    depends_on:
      - postgres  # Wait for the PostgreSQL service to start
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow  # Database connection string
      AIRFLOW__CORE__EXECUTOR: LocalExecutor  # Set the executor type
    entrypoint: /bin/bash -c "airflow db init"  # Initialize the Airflow database
    networks:
      - airflow  # Connect to the 'airflow' network

  webserver:
    build:
      context: .  # Build context is the current directory
      dockerfile: Dockerfile  # Specify the Dockerfile to use for building
    depends_on:
      - airflow-init  # Wait for the airflow-init service to complete
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow  # Database connection string
      AIRFLOW__CORE__EXECUTOR: LocalExecutor  # Set the executor type
      AIRFLOW__WEBSERVER__RBAC: "True"  # Enable Role-Based Access Control (RBAC)
      AIRFLOW__WEBSERVER__SECRET_KEY: "0506"  # Set a secret key for the webserver
    ports:
      - "8080:8080"  # Expose port 8080 for the web server
    command: "airflow webserver"  # Command to run the Airflow web server
    #volumes:
     # - /home/lourdes22/data-pipeline/files:/opt/airflow/files
    networks:
      - airflow  # Connect to the 'airflow' network
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]  # Health check for the web server
      interval: 10s  # Interval between health checks
      retries: 5  # Number of retries before marking the service as unhealthy
      timeout: 5s  # Timeout for the health check command

  scheduler:
    build:
      context: .  # Build context is the current directory
      dockerfile: Dockerfile  # Specify the Dockerfile to use for building
    depends_on:
      - airflow-init  # Wait for the airflow-init service to complete
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow  # Database connection string
      AIRFLOW__CORE__EXECUTOR: LocalExecutor  # Set the executor type
      AIRFLOW__WEBSERVER__SECRET_KEY: "0506"  # Set a secret key for the webserver
    #volumes:
      #- /home/lourdes22/data-pipeline/files:/opt/airflow/files 
    networks:
      - airflow  # Connect to the 'airflow' network
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob"]  # Health check for the scheduler
      interval: 10s  # Interval between health checks
      retries: 5  # Number of retries before marking the service as unhealthy
      timeout: 5s  # Timeout for the health check command

  worker:
    image: apache/airflow:2.5.1  # Use a specific version of Apache Airflow
    depends_on:
      - airflow-init  # Wait for the airflow-init service to complete
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow  # Database connection string
      AIRFLOW__CORE__EXECUTOR: LocalExecutor  # Set the executor type
      AIRFLOW__WEBSERVER__SECRET_KEY: "0506"  # Set a secret key for the webserver
    command: "airflow celery worker"  # Command to run the Celery worker
    #volumes:
     # - /home/lourdes22/data-pipeline/files:/opt/airflow/files
    networks:
      - airflow  # Connect to the 'airflow' network
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type LocalTaskJob"]  # Health check for the worker
      interval: 10s  # Interval between health checks
      retries: 5  # Number of retries before marking the service as unhealthy
      timeout: 5s  # Timeout for the health check command

  flower:
    image: apache/airflow:2.5.1  # Use a specific version of Apache Airflow
    depends_on:
      - airflow-init  # Wait for the airflow-init service to complete
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow  # Database connection string
    command: "airflow celery flower"  # Command to run the Flower UI
    ports:
      - "5555:5555"  # Expose port 5555 for Flower UI access
    networks:
      - airflow  # Connect to the 'airflow' network

volumes:
  postgres-db-volume:
    driver: local  # Use the local driver for the PostgreSQL volume

networks:
  airflow:
    driver: bridge  # Use the bridge driver for the Airflow network